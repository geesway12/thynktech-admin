import{db,saveDb}from"./db.js";import{themePicker}from"./app.js";const fieldTypes=[{value:"text",label:"Text"},{value:"integer",label:"Integer"},{value:"decimal",label:"Decimal"},{value:"select_one",label:"Single Select (select_one)"},{value:"select_multiple",label:"Multiple Select (select_multiple)"},{value:"date",label:"Date"},{value:"time",label:"Time"},{value:"datetime",label:"DateTime"},{value:"note",label:"Note/Label"},{value:"calculate",label:"Calculation"},{value:"image",label:"Image"},{value:"audio",label:"Audio"},{value:"video",label:"Video"},{value:"file",label:"File Upload"},{value:"barcode",label:"Barcode"},{value:"qr_code",label:"QR Code"},{value:"geopoint",label:"Geopoint"},{value:"geotrace",label:"Geotrace"},{value:"geoshape",label:"Geoshape"}];db.registers||(db.registers=[]);export function renderRegisterMgmt(e){function t(t={name:"",fields:[],assignedUsers:[]},l=null){const n=document.createElement("div");function i(){n.querySelector("#fieldList").innerHTML=(t.fields||[]).map(e=>a(e)).join(""),n.querySelectorAll(".editFieldBtn").forEach(e=>e.onclick=()=>s(t.fields[e.dataset.fidx],e.dataset.fidx)),n.querySelectorAll(".deleteFieldBtn").forEach(e=>e.onclick=()=>{confirm("Delete this field?")&&(t.fields.splice(e.dataset.fidx,1),i())}),n.querySelectorAll(".moveUpBtn").forEach(e=>e.onclick=()=>{const l=+e.dataset.fidx;l>0&&([t.fields[l-1],t.fields[l]]=[t.fields[l],t.fields[l-1]],i())}),n.querySelectorAll(".moveDownBtn").forEach(e=>e.onclick=()=>{const l=+e.dataset.fidx;l<t.fields.length-1&&([t.fields[l],t.fields[l+1]]=[t.fields[l+1],t.fields[l]],i())})}function s(e={name:"",type:"text",required:!1},l=null){const n=document.createElement("div");n.className="modal-overlay",n.innerHTML=`\n        <div class="modal-content mx-auto" style="max-width:400px;">\n          <h6>${null!==l?"Edit Field":"Add Field"}</h6>\n          <form id="fieldForm">\n            <div class="mb-2"><input class="form-control" id="fieldName" placeholder="Field Name" required value="${e.name||""}"></div>\n            <div class="mb-2">\n              <select class="form-select" id="fieldType" required>\n                ${fieldTypes.map(t=>`<option value="${t.value}"${e.type===t.value?" selected":""}>${t.label}</option>`).join("")}\n              </select>\n            </div>\n            <div class="mb-2 form-check">\n              <input class="form-check-input" type="checkbox" id="fieldReq" ${e.required?"checked":""}>\n              <label class="form-check-label" for="fieldReq">Required</label>\n            </div>\n            <div class="mb-2"><input class="form-control" id="fieldDefault" placeholder="Default Value" value="${e.default||""}"></div>\n            <div class="mb-2"><input class="form-control" id="fieldConstraint" placeholder="Constraint/Validation (e.g. min=0,max=100)" value="${e.constraint||""}"></div>\n            <div class="mb-2" id="choicesRow" style="display:${["select_one","select_multiple"].includes(e.type)?"block":"none"}">\n              <input class="form-control" id="fieldChoices" placeholder="Choices (comma-separated, e.g. Yes,No,Unknown)" value="${e.choices||""}" ${["select_one","select_multiple"].includes(e.type)?"required":""}>\n            </div>\n            <div class="mb-2" id="calcRow" style="display:${"calculate"===e.type?"block":"none"}">\n              <input class="form-control" id="fieldCalc" placeholder="Calculation Formula (e.g. today() - dob)" value="${e.calc||""}">\n            </div>\n            <div class="mb-2 d-flex justify-content-between">\n              <button class="btn btn-primary">${null!==l?"Save":"Add"}</button>\n              <button type="button" class="btn btn-secondary" id="cancelFieldBtn">Cancel</button>\n            </div>\n          </form>\n        </div>\n      `,document.body.appendChild(n),n.onclick=e=>{e.target===n&&document.body.removeChild(n)},n.querySelector("#cancelFieldBtn").onclick=()=>document.body.removeChild(n),n.querySelector("#fieldType").onchange=function(){const e=["select_one","select_multiple"].includes(this.value);n.querySelector("#choicesRow").style.display=e?"block":"none",n.querySelector("#fieldChoices").required=e,n.querySelector("#calcRow").style.display="calculate"===this.value?"block":"none"},n.querySelector("#fieldForm").onsubmit=function(e){e.preventDefault();let s={name:this.fieldName.value,type:this.fieldType.value,required:this.fieldReq.checked,default:this.fieldDefault.value,constraint:this.fieldConstraint.value};["select_one","select_multiple"].includes(s.type)&&(s.choices=this.fieldChoices.value),"calculate"===s.type&&(s.calc=this.fieldCalc.value),null!==l?t.fields[l]=s:t.fields.push(s),document.body.removeChild(n),i()}}function a(e,t){return`<li class="list-group-item d-flex justify-content-between align-items-center" style="font-size:95%">\n        <div>\n          <b>${e.name}</b> <span class="badge bg-secondary">${e.type}</span>\n          ${e.required?'<span class="badge bg-danger ms-1">required</span>':""}\n          ${e.choices?'<span class="text-muted ms-1">['+e.choices+"]</span>":""}\n        </div>\n        <div>\n          <button type="button" class="btn btn-sm btn-light moveUpBtn" data-fidx="${t}"><i class="bi bi-chevron-up"></i></button>\n          <button type="button" class="btn btn-sm btn-light moveDownBtn" data-fidx="${t}"><i class="bi bi-chevron-down"></i></button>\n          <button type="button" class="btn btn-sm btn-accent editFieldBtn" data-fidx="${t}"><i class="bi bi-pencil"></i></button>\n          <button type="button" class="btn btn-sm btn-danger deleteFieldBtn" data-fidx="${t}"><i class="bi bi-trash"></i></button>\n        </div>\n      </li>`}n.className="modal-overlay",n.innerHTML=`\n      <div class="modal-content mx-auto" style="max-width:500px;">\n        <h5>${null!==l?"Edit Register":"New Register"}</h5>\n        <form id="regForm" autocomplete="off">\n          <div class="mb-2"><input class="form-control" id="regName" placeholder="Register Name (e.g. ANC, OPD)" required value="${t.name||""}"></div>\n          <div class="mb-3">\n            <div class="d-flex justify-content-between align-items-center">\n              <b>Fields</b>\n              <button type="button" class="btn btn-sm btn-success" id="addFieldBtn"><i class="bi bi-plus"></i> Add Field</button>\n            </div>\n            <ul class="list-group mt-2" id="fieldList">${(t.fields||[]).map(e=>a(e)).join("")}</ul>\n          </div>\n          <div class="mb-2 d-flex justify-content-between">\n            <button class="btn btn-primary">${null!==l?"Save":"Create"}</button>\n            <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>\n          </div>\n        </form>\n      </div>\n    `,document.body.appendChild(n),n.onclick=e=>{e.target===n&&document.body.removeChild(n)},n.querySelector("#cancelBtn").onclick=()=>document.body.removeChild(n),document.getElementById("addFieldBtn").onclick=()=>s(),n.querySelectorAll(".editFieldBtn").forEach(e=>e.onclick=()=>s(t.fields[e.dataset.fidx],e.dataset.fidx)),n.querySelectorAll(".deleteFieldBtn").forEach(e=>e.onclick=()=>{confirm("Delete this field? Data already captured for this field will be kept in old records.")&&(t.fields.splice(e.dataset.fidx,1),i())}),n.querySelectorAll(".moveUpBtn").forEach(e=>e.onclick=()=>{const l=+e.dataset.fidx;l>0&&([t.fields[l-1],t.fields[l]]=[t.fields[l],t.fields[l-1]],i())}),n.querySelectorAll(".moveDownBtn").forEach(e=>e.onclick=()=>{const l=+e.dataset.fidx;l<t.fields.length-1&&([t.fields[l],t.fields[l+1]]=[t.fields[l+1],t.fields[l]],i())}),document.getElementById("regForm").onsubmit=function(i){i.preventDefault(),t.name=this.regName.value,t.assignedUsers||(t.assignedUsers=[]),null!==l?db.registers[l]=t:db.registers.push(t),saveDb(),n.remove(),renderRegisterMgmt(e)}}e.innerHTML=`\n    <div class="container my-4">\n      <div class="d-flex align-items-center justify-content-between">\n        <h4><i class="bi bi-journals"></i> Service Register Management</h4>\n        ${themePicker}\n      </div>\n      <button class="btn btn-success mb-3" id="addRegBtn"><i class="bi bi-plus"></i> New Register</button>\n      <div class="row" id="regList">\n        ${db.registers.map((e,t)=>`\n          <div class="col-md-4 mb-3">\n            <div class="card shadow-sm">\n              <div class="card-body">\n                <h5>${e.name}</h5>\n                <small class="text-muted">${e.fields.length} fields</small>\n                <div class="mt-2">\n                  <button class="btn btn-sm btn-primary me-2" data-idx="${t}"><i class="bi bi-pencil"></i> Edit</button>\n                  <button class="btn btn-sm btn-danger" data-idx="${t}"><i class="bi bi-trash"></i></button>\n                  <button class="btn btn-sm btn-secondary assignBtn" data-idx="${t}"><i class="bi bi-person-plus"></i> Assign Users</button>\n                </div>\n                <div class="mt-2 small text-muted">\n                  Assigned: ${(e.assignedUsers||[]).map(e=>e).join(", ")||"None"}\n                </div>\n              </div>\n            </div>\n          </div>\n        `).join("")}\n      </div>\n      <a href="#admin-dashboard" class="btn btn-link mt-2"><i class="bi bi-arrow-left"></i> Back</a>\n      <div id="regModal"></div>\n    </div>\n  `,e.querySelectorAll("button.btn-primary").forEach(e=>e.onclick=()=>t(db.registers[e.dataset.idx],e.dataset.idx)),e.querySelectorAll("button.btn-danger").forEach(t=>t.onclick=()=>{confirm("Delete this register? All service data will be kept but new entry will be disabled for this register.")&&(db.registers.splice(t.dataset.idx,1),saveDb(),renderRegisterMgmt(e))}),e.querySelector("#addRegBtn").onclick=()=>t(),e.querySelectorAll(".assignBtn").forEach(t=>t.onclick=()=>function(t,l){const n=e.querySelector("#regModal"),i=db.users||[];n.innerHTML=`\n      <div class="modal-content mx-auto" style="min-width:320px;max-width:99vw">\n        <h5>Assign Users to ${t.name}</h5>\n        <form id="assignForm">\n          <div class="mb-3">\n            ${0===i.length?'<div class="alert alert-warning">No users found.</div>':""}\n            <div class="form-check">\n              ${i.map((e,l)=>`\n                <input class="form-check-input" type="checkbox" id="user_${l}" value="${e.username}" ${t.assignedUsers&&t.assignedUsers.includes(e.username)?"checked":""}>\n                <label class="form-check-label" for="user_${l}">${e.username} (${e.role})</label><br>\n              `).join("")}\n            </div>\n          </div>\n          <div class="mb-2 d-flex justify-content-between">\n            <button class="btn btn-primary">Save</button>\n            <button type="button" class="btn btn-secondary" id="cancelAssignBtn">Cancel</button>\n          </div>\n        </form>\n      </div>\n    `,n.className="active",n.onclick=e=>{e.target===n&&(n.className="",n.innerHTML="")},document.getElementById("cancelAssignBtn").onclick=()=>{n.className="",n.innerHTML=""},document.getElementById("assignForm").onsubmit=function(i){i.preventDefault(),t.assignedUsers=Array.from(this.querySelectorAll("input[type=checkbox]:checked")).map(e=>e.value),db.registers[l]=t,saveDb(),n.className="",n.innerHTML="",renderRegisterMgmt(e)}}(db.registers[t.dataset.idx],t.dataset.idx))}
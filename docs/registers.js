import{db,saveDb}from"./db.js";const fieldTypes=[{value:"text",label:"Text"},{value:"integer",label:"Integer"},{value:"decimal",label:"Decimal"},{value:"select_one",label:"Single Select (select_one)"},{value:"select_multiple",label:"Multiple Select (select_multiple)"},{value:"date",label:"Date"},{value:"time",label:"Time"},{value:"datetime",label:"DateTime"},{value:"note",label:"Note/Label"},{value:"calculate",label:"Calculation"},{value:"image",label:"Image"},{value:"audio",label:"Audio"},{value:"video",label:"Video"},{value:"file",label:"File Upload"},{value:"barcode",label:"Barcode"},{value:"qr_code",label:"QR Code"},{value:"geopoint",label:"Geopoint"},{value:"geotrace",label:"Geotrace"},{value:"geoshape",label:"Geoshape"}];db.registers||(db.registers=[]);export function renderRegisterMgmt(e){e.innerHTML=`\n    <div class="container my-4" style="padding: 20px;">\n      <div class="d-flex align-items-center justify-content-between mb-4">\n        <h4><i class="bi bi-journals"></i> Service Register Management</h4>\n        <div class="d-flex">\n          <button class="btn btn-success me-2" id="addRegBtn"><i class="bi bi-plus"></i> New Register</button>\n          <button class="btn btn-primary" id="uploadBtn"><i class="bi bi-cloud-upload"></i> Upload Registers</button>\n        </div>\n      </div>\n      <div id="formContainer" class="mb-4" style="display: none;"></div>\n      <div class="row" id="regList" style="gap: 10px;">\n        ${db.registers.map((e,t)=>`\n          <div class="col-md-3">\n            <div class="card shadow-sm" style="margin: 5px;">\n              <div class="card-body" style="padding: 10px;">\n                <h6>${e.name}</h6>\n                <small class="text-muted">${e.fields.length} fields</small>\n                <div class="mt-2">\n                  <button class="btn btn-sm btn-primary me-2" data-idx="${t}"><i class="bi bi-pencil"></i> Edit</button>\n                  <button class="btn btn-sm btn-danger" data-idx="${t}"><i class="bi bi-trash"></i></button>\n                  <button class="btn btn-sm btn-secondary assignBtn" data-idx="${t}"><i class="bi bi-person-plus"></i> Assign Users</button>\n                </div>\n                <div class="mt-2 small text-muted">\n                  Assigned: ${(e.assignedUsers||[]).map(e=>e).join(", ")||"None"}\n                </div>\n              </div>\n            </div>\n          </div>\n        `).join("")}\n      </div>\n      <a href="#admin-dashboard" class="btn btn-link mt-2" style="margin-top: 20px;"><i class="bi bi-arrow-left"></i> Back</a>\n      <div id="regModal"></div>\n    </div>\n  `,e.querySelectorAll("button.btn-primary").forEach(t=>t.onclick=()=>function(t={name:"",fields:[],assignedUsers:[]},n=null){const l=document.createElement("div");function s(){l.querySelector("#fieldList").innerHTML=(t.fields||[]).map(e=>a(e)).join(""),l.querySelectorAll(".editFieldBtn").forEach(e=>e.onclick=()=>i(t.fields[e.dataset.fidx],e.dataset.fidx)),l.querySelectorAll(".deleteFieldBtn").forEach(e=>e.onclick=()=>{confirm("Delete this field?")&&(t.fields.splice(e.dataset.fidx,1),s())}),l.querySelectorAll(".moveUpBtn").forEach(e=>e.onclick=()=>{const n=+e.dataset.fidx;n>0&&([t.fields[n-1],t.fields[n]]=[t.fields[n],t.fields[n-1]],s())}),l.querySelectorAll(".moveDownBtn").forEach(e=>e.onclick=()=>{const n=+e.dataset.fidx;n<t.fields.length-1&&([t.fields[n],t.fields[n+1]]=[t.fields[n+1],t.fields[n]],s())})}function i(e={name:"",type:"text",required:!1},n=null){const l=document.createElement("div");l.className="modal-overlay",l.innerHTML=`\n        <div class="modal-content mx-auto" style="max-width:400px;">\n          <h6>${null!==n?"Edit Field":"Add Field"}</h6>\n          <form id="fieldForm">\n            <div class="mb-2"><input class="form-control" id="fieldName" placeholder="Field Name" required value="${e.name||""}"></div>\n            <div class="mb-2">\n              <select class="form-select" id="fieldType" required>\n                ${fieldTypes.map(t=>`<option value="${t.value}"${e.type===t.value?" selected":""}>${t.label}</option>`).join("")}\n              </select>\n            </div>\n            <div class="mb-2 form-check">\n              <input class="form-check-input" type="checkbox" id="fieldReq" ${e.required?"checked":""}>\n              <label class="form-check-label" for="fieldReq">Required</label>\n            </div>\n            <div class="mb-2"><input class="form-control" id="fieldDefault" placeholder="Default Value" value="${e.default||""}"></div>\n            <div class="mb-2"><input class="form-control" id="fieldConstraint" placeholder="Constraint/Validation (e.g. min=0,max=100)" value="${e.constraint||""}"></div>\n            <div class="mb-2" id="choicesRow" style="display:${["select_one","select_multiple"].includes(e.type)?"block":"none"}">\n              <input class="form-control" id="fieldChoices" placeholder="Choices (comma-separated, e.g. Yes,No,Unknown)" value="${e.choices||""}" ${["select_one","select_multiple"].includes(e.type)?"required":""}>\n            </div>\n            <div class="mb-2" id="calcRow" style="display:${"calculate"===e.type?"block":"none"}">\n              <input class="form-control" id="fieldCalc" placeholder="Calculation Formula (e.g. today() - dob)" value="${e.calc||""}">\n            </div>\n            <div class="mb-2 d-flex justify-content-between">\n              <button class="btn btn-primary">${null!==n?"Save":"Add"}</button>\n              <button type="button" class="btn btn-secondary" id="cancelFieldBtn">Cancel</button>\n            </div>\n          </form>\n        </div>\n      `,document.body.appendChild(l),l.onclick=e=>{e.target===l&&document.body.removeChild(l)},l.querySelector("#cancelFieldBtn").onclick=()=>document.body.removeChild(l),l.querySelector("#fieldType").onchange=function(){const e=["select_one","select_multiple"].includes(this.value);l.querySelector("#choicesRow").style.display=e?"block":"none",l.querySelector("#fieldChoices").required=e,l.querySelector("#calcRow").style.display="calculate"===this.value?"block":"none"},l.querySelector("#fieldForm").onsubmit=function(e){e.preventDefault();let i={name:this.fieldName.value,type:this.fieldType.value,required:this.fieldReq.checked,default:this.fieldDefault.value,constraint:this.fieldConstraint.value};["select_one","select_multiple"].includes(i.type)&&(i.choices=this.fieldChoices.value),"calculate"===i.type&&(i.calc=this.fieldCalc.value),null!==n?t.fields[n]=i:t.fields.push(i),document.body.removeChild(l),s()}}function a(e,t){return`<li class="list-group-item d-flex justify-content-between align-items-center" style="font-size:95%">\n        <div>\n          <b>${e.name}</b> <span class="badge bg-secondary">${e.type}</span>\n          ${e.required?'<span class="badge bg-danger ms-1">required</span>':""}\n          ${e.choices?'<span class="text-muted ms-1">['+e.choices+"]</span>":""}\n        </div>\n        <div>\n          <button type="button" class="btn btn-sm btn-light moveUpBtn" data-fidx="${t}"><i class="bi bi-chevron-up"></i></button>\n          <button type="button" class="btn btn-sm btn-light moveDownBtn" data-fidx="${t}"><i class="bi bi-chevron-down"></i></button>\n          <button type="button" class="btn btn-sm btn-accent editFieldBtn" data-fidx="${t}"><i class="bi bi-pencil"></i></button>\n          <button type="button" class="btn btn-sm btn-danger deleteFieldBtn" data-fidx="${t}"><i class="bi bi-trash"></i></button>\n        </div>\n      </li>`}l.className="modal-overlay",l.innerHTML=`\n      <div class="modal-content mx-auto" style="max-width:500px;">\n        <h5>${null!==n?"Edit Register":"New Register"}</h5>\n        <form id="regForm" autocomplete="off">\n          <div class="mb-2"><input class="form-control" id="regName" placeholder="Register Name (e.g. ANC, OPD)" required value="${t.name||""}"></div>\n          <div class="mb-3">\n            <div class="d-flex justify-content-between align-items-center">\n              <b>Fields</b>\n              <button type="button" class="btn btn-sm btn-success" id="addFieldBtn"><i class="bi bi-plus"></i> Add Field</button>\n            </div>\n            <ul class="list-group mt-2" id="fieldList">${(t.fields||[]).map(e=>a(e)).join("")}</ul>\n          </div>\n          <div class="mb-2 d-flex justify-content-between">\n            <button class="btn btn-primary">${null!==n?"Save":"Create"}</button>\n            <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>\n          </div>\n        </form>\n      </div>\n    `,document.body.appendChild(l),l.onclick=e=>{e.target===l&&document.body.removeChild(l)},l.querySelector("#cancelBtn").onclick=()=>document.body.removeChild(l),document.getElementById("addFieldBtn").onclick=()=>i(),l.querySelectorAll(".editFieldBtn").forEach(e=>e.onclick=()=>i(t.fields[e.dataset.fidx],e.dataset.fidx)),l.querySelectorAll(".deleteFieldBtn").forEach(e=>e.onclick=()=>{confirm("Delete this field? Data already captured for this field will be kept in old records.")&&(t.fields.splice(e.dataset.fidx,1),s())}),l.querySelectorAll(".moveUpBtn").forEach(e=>e.onclick=()=>{const n=+e.dataset.fidx;n>0&&([t.fields[n-1],t.fields[n]]=[t.fields[n],t.fields[n-1]],s())}),l.querySelectorAll(".moveDownBtn").forEach(e=>e.onclick=()=>{const n=+e.dataset.fidx;n<t.fields.length-1&&([t.fields[n],t.fields[n+1]]=[t.fields[n+1],t.fields[n]],s())}),document.getElementById("regForm").onsubmit=function(s){s.preventDefault(),t.name=this.regName.value,t.assignedUsers||(t.assignedUsers=[]),null!==n?db.registers[n]=t:db.registers.push(t),saveDb(),l.remove(),renderRegisterMgmt(e)}}(db.registers[t.dataset.idx],t.dataset.idx)),e.querySelectorAll("button.btn-danger").forEach(t=>t.onclick=()=>{confirm("Delete this register? All service data will be kept but new entry will be disabled for this register.")&&(db.registers.splice(t.dataset.idx,1),saveDb(),renderRegisterMgmt(e))}),e.querySelector("#addRegBtn").onclick=()=>{const t=e.querySelector("#formContainer");t.style.display="block",t.innerHTML='\n      <div class="card shadow-sm">\n        <div class="card-body">\n          <h5>Create New Register</h5>\n          <form id="regForm" autocomplete="off">\n            <div class="mb-2"><input class="form-control" id="regName" placeholder="Register Name (e.g. ANC, OPD)" required></div>\n            <div class="mb-3">\n              <div class="d-flex justify-content-between align-items-center">\n                <b>Fields</b>\n                <button type="button" class="btn btn-sm btn-success" id="addFieldBtn"><i class="bi bi-plus"></i> Add Field</button>\n              </div>\n              <ul class="list-group mt-2" id="fieldList"></ul>\n            </div>\n            <div class="mb-2 d-flex justify-content-between">\n              <button class="btn btn-primary">Create</button>\n              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    ',e.querySelector("#cancelBtn").onclick=()=>{t.style.display="none",t.innerHTML=""},e.querySelector("#regForm").onsubmit=function(n){n.preventDefault();const l={name:this.regName.value,fields:[],assignedUsers:[]};db.registers.push(l),saveDb(),t.style.display="none",t.innerHTML="",renderRegisterMgmt(e)}},e.querySelectorAll(".assignBtn").forEach(t=>t.onclick=()=>function(t,n){const l=e.querySelector("#regModal"),s=db.users||[];l.innerHTML=`\n      <div class="modal-content mx-auto" style="min-width:320px;max-width:99vw">\n        <h5>Assign Users to ${t.name}</h5>\n        <form id="assignForm">\n          <div class="mb-3">\n            ${0===s.length?'<div class="alert alert-warning">No users found.</div>':""}\n            <div class="form-check">\n              ${s.map((e,n)=>`\n                <input class="form-check-input" type="checkbox" id="user_${n}" value="${e.username}" ${t.assignedUsers&&t.assignedUsers.includes(e.username)?"checked":""}>\n                <label class="form-check-label" for="user_${n}">${e.username} (${e.role})</label><br>\n              `).join("")}\n            </div>\n          </div>\n          <div class="mb-2 d-flex justify-content-between">\n            <button class="btn btn-primary">Save</button>\n            <button type="button" class="btn btn-secondary" id="cancelAssignBtn">Cancel</button>\n          </div>\n        </form>\n      </div>\n    `,l.className="active",l.onclick=e=>{e.target===l&&(l.className="",l.innerHTML="")},document.getElementById("cancelAssignBtn").onclick=()=>{l.className="",l.innerHTML=""},document.getElementById("assignForm").onsubmit=function(s){s.preventDefault(),t.assignedUsers=Array.from(this.querySelectorAll("input[type=checkbox]:checked")).map(e=>e.value),db.registers[n]=t,saveDb(),l.className="",l.innerHTML="",renderRegisterMgmt(e)}}(db.registers[t.dataset.idx],t.dataset.idx)),e.querySelector("#uploadBtn").onclick=()=>{const t=e.querySelector("#formContainer");t.style.display="block",t.innerHTML='\n      <div class="card shadow-sm">\n        <div class="card-body">\n          <h5>Upload Registers</h5>\n          <form id="uploadForm">\n            <label for="registerUploadInput" class="form-label">Upload Registers (.xlsx format):</label>\n            <input type="file" id="registerUploadInput" class="form-control" accept=".xlsx">\n            <div class="mt-3 d-flex justify-content-between">\n              <button class="btn btn-primary">Upload</button>\n              <button type="button" class="btn btn-secondary" id="cancelUploadBtn">Cancel</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    ',e.querySelector("#cancelUploadBtn").onclick=()=>{t.style.display="none",t.innerHTML=""},e.querySelector("#uploadForm").onsubmit=function(n){n.preventDefault();const l=this.registerUploadInput.files[0];l?function(e,t){const n=new FileReader;n.onload=function(e){const n=new Uint8Array(e.target.result),l=XLSX.read(n,{type:"array"}),s=l.SheetNames[0],i=l.Sheets[s],a=XLSX.utils.sheet_to_json(i,{header:1}),d={};a.forEach((e,t)=>{if(0===t)return;const[n,l,s,i,a,c,o,r]=e;n&&l&&s&&(d[n]||(d[n]={name:n,fields:[]}),d[n].fields.push({name:l,type:s,required:"1"===i,choices:a,default:c,constraint:o,calc:r}))}),t(Object.values(d))},n.readAsArrayBuffer(e)}(l,function(n){db.registers.push(...n),saveDb(),t.style.display="none",t.innerHTML="",renderRegisterMgmt(e),alert("Registers uploaded successfully!")}):alert("Please select a file to upload.")}}}
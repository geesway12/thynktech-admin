const CACHE_NAME="thynktech-{{APP_TYPE}}-cache-v{{CACHE_VERSION}}",baseUrlsToCache=["/","/index.html","/offline.html","/styles.css","/favicon.ico","/favicon.svg","/logo.png","/manifest.json","/icon-192.png","/icon-512.png","/apple-touch-icon.png","/apple-touch-icon-precomposed.png","/favicon-96x96.png"],appSpecificUrls={admin:["/app.js","/admin.js","/pwa.js","/registers.js"],users:["/app.js","/pwa.js","/users.js"]},coreModules=["/appointments.js","/auth.js","/backup.js","/db.js","/export.js","/helpers.js","/layout.js","/patients.js","/reports.js","/services.js","/visits.js"],urlsToCache=[...baseUrlsToCache,...appSpecificUrls["{{APP_TYPE}}"]||[],...coreModules];self.addEventListener("install",e=>{console.log("[SW] Installing TechThynk {{APP_TYPE}} service worker v{{CACHE_VERSION}}"),self.skipWaiting(),e.waitUntil(caches.open(CACHE_NAME).then(e=>(console.log(`[SW] Caching ${urlsToCache.length} resources`),e.addAll(urlsToCache))).catch(e=>{console.error("[SW] Failed to cache resources:",e)}))}),self.addEventListener("activate",e=>{console.log("[SW] Activating TechThynk {{APP_TYPE}} service worker v{{CACHE_VERSION}}"),e.waitUntil(caches.keys().then(e=>{const s=e.filter(e=>e.startsWith("thynktech-{{APP_TYPE}}-cache-")&&e!==CACHE_NAME).map(e=>(console.log(`[SW] Deleting old cache: ${e}`),caches.delete(e)));return Promise.all(s)})),self.clients.claim()}),self.addEventListener("fetch",e=>{"GET"===e.request.method&&e.request.url.startsWith(self.location.origin)&&e.respondWith(caches.match(e.request).then(s=>s?(console.log(`[SW] Serving from cache: ${e.request.url}`),s):(console.log(`[SW] Fetching from network: ${e.request.url}`),fetch(e.request).then(s=>{if(!s||200!==s.status||"basic"!==s.type)return s;const t=s.clone();return caches.open(CACHE_NAME).then(s=>{s.put(e.request,t)}),s}).catch(s=>{if(console.log(`[SW] Network fetch failed: ${e.request.url}`,s),"document"===e.request.destination)return caches.match("/offline.html");throw s}))))}),self.addEventListener("message",e=>{e.data&&"SKIP_WAITING"===e.data.type&&(console.log("[SW] Received SKIP_WAITING message"),self.skipWaiting())}),self.addEventListener("sync",e=>{console.log(`[SW] Background sync triggered: ${e.tag}`),"background-sync"===e.tag&&e.waitUntil(Promise.resolve())}),self.addEventListener("push",e=>{console.log("[SW] Push message received");const s={body:e.data?e.data.text():"TechThynk notification",icon:"/icon-192.png",badge:"/favicon-96x96.png",tag:"thynktech-notification"};e.waitUntil(self.registration.showNotification("TechThynk {{APP_TYPE}}",s))}),console.log(`[SW] TechThynk {{APP_TYPE}} service worker loaded - Cache: ${CACHE_NAME}`);